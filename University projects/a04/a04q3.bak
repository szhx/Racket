;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname a04q3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(define-struct triangle (equality sharpness a1 a2 a3))
;; A Triangle is a (make-triangle Sym Sym Num Num Num)
;; Requires:
;;   equality is 'equilateral, 'isosceles, or 'scalene
;;   sharpness is 'acute, 'obtuse, or 'right
;;   the sum of a1, a2, and a3 is 180.
;;   a1, a2, and a3 are all > 0.

;; Template for Triangle function
;; my-triangle-fun: Triangle -> Any
(define (my-triangle-fun atriangle)
  (... (triangle-equality atriangle) ...
       (triangle-sharpness atriangle) ...
       (triangle-a1 atriangle) ...
       (triangle-a2 atriangle) ...
       (triangle-a3 atriangle) ...))

(define (equality? angle1 angle2)
  (cond
    [(and (equal? angle1 angle2)
          (equal? angle2 (- 180 (+ angle1 angle2))))
     'equilateral]
    [(or (equal? angle1 angle2)
         (equal? angle1 (- 180 (+ angle1 angle2)))
         (equal? angle2 (- 180 (+ angle1 angle2))))
     'isosceles]
    [else 'scalene]))

(define (sharpness? tria1 tria2)
  (cond
    [(and (< a1 90) (< a2 90)
          (< (- 180 (+ a1 a2)) 90))
     'acute]
    [(or (< 90 a1) (< 90 a2)
         (< 90 (- 180 (+ a1 a2))))
     'obtuse]
    [(or (= 90 a1) (= 90 a2)
         (= 90 (- 180 (+ a1 a2))))]))
          
          

(define (complete-triangle a1 a2)
  (make-triangle (equality? a1 a2)
                 (sharpness? a1 a2)
                 a1 a2
                 (- 180 (+ a1 a2))))
     